/*
*  Modification by Nagavenkat Adurthi based on/inspired from SimpleGPIO.cpp by
*  Copyright (c) 2011, RidgeRun
 * All rights reserved.
   Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 * must display the following acknowledgement:
 * This product includes software developed by the RidgeRun.
 * 4. Neither the name of the RidgeRun nor the
 * names of its contributors may be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY RIDGERUN ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL RIDGERUN BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

 #include <stdio.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 #include <errno.h>
 #include <unistd.h>
 #include <fcntl.h>
 #include <poll.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <unistd.h>
 #include <iostream>
 #include <stdlib.h>
 using namespace std; 

 #define MAX_BUF 64
 /* ************************************************
 *            A Simple class for PWM control      *
 ************************************************ */
 class PWM {
 unsigned long int duty1,period;
 public:
 /* ************** Export PWMs ****************** */
 void export_pwms(){
 int fd, len;
 char buf[MAX_BUF];
 struct stat st; //check if already exported...just checking one pwm
 if(stat("/sys/class/pwm/pwm0",&st)==0)
 {printf("pwms already exported\n");return;} 

 for(int i=0;i<4;i++){
   fd = open("/sys/class/pwm/export", O_WRONLY);
   if (fd < 0) 
   {perror("pwm/export");return;} 

len = snprintf(buf, sizeof(buf), "%d", i);
 write(fd, buf, len);
 close(fd);
 } 
return;
 } 
/* *************** SET PERIOD ********************* */ 
void set_period(){
 int fd, len;
 char buf[MAX_BUF]; 

 for(int i=0;i<4;i++){
 snprintf(buf, sizeof(buf), "/sys/class/pwm/pwm%d/period_ns", i);
 fd = open(buf, O_WRONLY);
 if (fd < 0) 
 {perror("pwm/period");return;}

 len = snprintf(buf, sizeof(buf), "%lu", 20000000); //20ms period for servo
 write(fd, buf, len);
 close(fd);
 } 
 return;
 }
 /* ****************SETTING DUTIES******************  */
 void set_duties(unsigned long int duty1,unsigned long int duty2,unsigned long int duty3,unsigned long int duty4){
 int fd, len;

 char buf[MAX_BUF]; 

 // write 1 rpm
 fd = open("/sys/class/pwm/pwm0/duty_ns", O_WRONLY);
 if (fd < 0) {
 perror("pwm0/duty");
 return;
 }
 len = snprintf(buf, sizeof(buf), "%lu", duty1);
 write(fd, buf, len);
 close(fd); 

 // write 2 rpm
 fd = open("/sys/class/pwm/pwm1/duty_ns", O_WRONLY);
 if (fd < 0) {
 perror("pwm1/duty");
 return;
 }
 len = snprintf(buf, sizeof(buf), "%lu", duty2);
 write(fd, buf, len);
 close(fd); 

 // write 3 rpm
 fd = open("/sys/class/pwm/pwm2/duty_ns", O_WRONLY);
 if (fd < 0) {
 perror("pwm2duty");
 return;
 }
 len = snprintf(buf, sizeof(buf), "%lu", duty3);
 write(fd, buf, len);
 close(fd); 

 // write 4 rpm
 fd = open("/sys/class/pwm/pwm3/duty_ns", O_WRONLY);
 if (fd < 0) {
 perror("pwm3/duty");
 return;
 }
 len = snprintf(buf, sizeof(buf), "%lu", duty4);
 write(fd, buf, len);
 close(fd);

 return;
 }
/* *********START the PWMS at the output ******* */
  void start_pwms(){
 int fd, len;
 char buf[MAX_BUF]; for(int i=0;i<4;i++){
 snprintf(buf, sizeof(buf), "/sys/class/pwm/pwm%d/run", i);
 fd = open(buf, O_WRONLY);
 if (fd < 0) {
 perror("pwm/run");
 return;
 } 
 len = snprintf(buf, sizeof(buf), "%d", 1);
 write(fd, buf, len);
 close(fd);
 } 
return;
 } 
/* *******************Stop the PWMS*****************   */       
void stop_pwms(){
 int fd, len;
 char buf[MAX_BUF]; for(int i=0;i<4;i++){
 snprintf(buf, sizeof(buf), "/sys/class/pwm/pwm%d/run", i);
 fd = open(buf, O_WRONLY);
 if (fd < 0) {
 perror("pwm/run");
 return;
 } 
 len = snprintf(buf, sizeof(buf), "%d", 0);
 write(fd, buf, len);
 close(fd);
 } 
return;
 } 
};
 int main(int argc, char **argv)
 {
 PWM Motor_pwm; // assuming that the overlay has already been manually loaded
 Motor_pwm.export_pwms(); // export pwm0, pwm1, pwm2, pwm3
 Motor_pwm.set_period(); // 20ms for servos
 Motor_pwm.set_duties(1000000,1000000,1000000,1000000); //should be < period and in nano seconds
 // 1500000 nano seconds= 1.5ms(milli seconds) : center position of servo
/* ****************** ARMING THE ESC(Electronic speed controller for brushless motors)
 * ****************** Not required for servos  ********************************** */                  
Motor_pwm.start_pwms();
 usleep(100000);
 Motor_pwm.set_duties(2500000,2500000,2500000,2500000);
 usleep(100000);
 Motor_pwm.set_duties(1000000,1000000,1000000,1000000);
 usleep(100000);
/* ******************************************************************************* */
 unsigned long int M1,M2,M3,M4; 
 while(1){
 cout<<"Give motor pwms as 10,11,....25";  //i.e. 15*100000=1500000=1.5 milli seconds and so on
 cin>>M1;
 cin>>M2;
 cin>>M3;
 cin>>M4;
 cout<<endl; Motor_pwm.set_duties(M1*100000,M2*100000,M3*100000,M4*100000);
 }
 Motor_pwm.stop_pwms();
 return 0;
 }